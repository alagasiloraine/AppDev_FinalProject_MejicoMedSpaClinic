rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection rules - Allow read for authenticated users
    match /users/{userId} {
      allow read: if isAuthenticated();  // Allow all authenticated users to read user data
      allow create: if isAuthenticated();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Appointments collection rules
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    // Public collections - allow read for all authenticated users
    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /products/{productId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /treatments/{treatmentId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Default rule
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}